{"ast":null,"code":"import { HttpClient, HttpBackend } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injectable } from '@angular/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nconst TRANSLATE_HTTP_LOADER_CONFIG = new InjectionToken(\"TRANSLATE_HTTP_LOADER_CONFIG\");\nlet TranslateHttpLoader = /*#__PURE__*/(() => {\n  class TranslateHttpLoader {\n    http;\n    config;\n    constructor() {\n      this.config = {\n        prefix: \"/assets/i18n/\",\n        suffix: \".json\",\n        enforceLoading: false,\n        useHttpBackend: false,\n        ...inject(TRANSLATE_HTTP_LOADER_CONFIG)\n      };\n      this.http = this.config.useHttpBackend ? new HttpClient(inject(HttpBackend)) : inject(HttpClient);\n    }\n    /**\n     * Gets the translations from the server\n     */\n    getTranslation(lang) {\n      const cacheBuster = this.config.enforceLoading ? `?enforceLoading=${Date.now()}` : \"\";\n      return this.http.get(`${this.config.prefix}${lang}${this.config.suffix}${cacheBuster}`);\n    }\n    static ɵfac = function TranslateHttpLoader_Factory(t) {\n      return new (t || TranslateHttpLoader)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateHttpLoader,\n      factory: TranslateHttpLoader.ɵfac\n    });\n  }\n  return TranslateHttpLoader;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideTranslateHttpLoader(config = {}) {\n  const useBackend = config.useHttpBackend ?? false;\n  return [{\n    provide: TRANSLATE_HTTP_LOADER_CONFIG,\n    useValue: config\n  }, {\n    provide: TranslateLoader,\n    useClass: TranslateHttpLoader,\n    deps: [useBackend ? HttpBackend : HttpClient, TRANSLATE_HTTP_LOADER_CONFIG]\n  }];\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TRANSLATE_HTTP_LOADER_CONFIG, TranslateHttpLoader, provideTranslateHttpLoader };\n//# sourceMappingURL=ngx-translate-http-loader.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}